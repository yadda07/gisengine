# -*- coding: utf-8 -*-
"""
GISENGINE Plugin for QGIS - Version Unifi√©e
Plugin principal avec interface unifi√©e int√©grant tous les composants
"""

import os
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QDockWidget, QMessageBox
from qgis.core import QgsProject, QgsApplication

# Import de l'interface unifi√©e
try:
    from .ui.unified_interface import UnifiedGISENGINEInterface
    print("‚úÖ Interface unifi√©e import√©e avec succ√®s")
except ImportError as e:
    print(f"‚ùå Erreur import interface unifi√©e: {e}")
    UnifiedGISENGINEInterface = None

class GISENGINEPlugin:
    """Plugin principal GISENGINE - Version Unifi√©e"""

    def __init__(self, iface):
        """Constructeur du plugin"""
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        
        # Interface elements
        self.actions = []
        self.menu = 'üõ†Ô∏è GISENGINE'
        self.unified_window = None
        self.dock_widget = None
        
        # Check if plugin was started the first time in current QGIS session
        self.first_start = None

    def tr(self, message):
        """Get the translation for a string using Qt translation API"""
        return QCoreApplication.translate('GISENGINEPlugin', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar"""

        if icon_path:
            icon = QIcon(icon_path)
        else:
            icon = QIcon()
            
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI"""
        
        # Pas d'ic√¥ne pour l'instant
        icon_path = ""
        
        # Action principale UNIQUE - Interface Unifi√©e
        self.add_action(
            icon_path,
            text=self.tr('üöÄ Ouvrir GISENGINE'),
            callback=self.show_unified_interface,
            parent=self.iface.mainWindow(),
            status_tip=self.tr('Ouvre l\'interface unifi√©e GISENGINE'),
            whats_this=self.tr('Interface compl√®te avec transformers, workflow designer et scanner processing')
        )
        
        # S√©parateur
        self.iface.addPluginToMenu(self.menu, None)
        
        # Actions secondaires pour acc√®s rapide
        self.add_action(
            icon_path,
            text=self.tr('üìä Designer de Workflow'),
            callback=self.show_workflow_tab,
            parent=self.iface.mainWindow(),
            status_tip=self.tr('Acc√®s direct au designer de workflow'),
            add_to_toolbar=False
        )
        
        self.add_action(
            icon_path,
            text=self.tr('üõ†Ô∏è Biblioth√®que Transformers'),
            callback=self.show_transformers_tab,
            parent=self.iface.mainWindow(),
            status_tip=self.tr('Acc√®s direct √† la biblioth√®que de transformers'),
            add_to_toolbar=False
        )
        
        self.add_action(
            icon_path,
            text=self.tr('‚öôÔ∏è Scanner Processing'),
            callback=self.show_processing_tab,
            parent=self.iface.mainWindow(),
            status_tip=self.tr('Acc√®s direct au scanner processing QGIS'),
            add_to_toolbar=False
        )
        
        # S√©parateur
        self.iface.addPluginToMenu(self.menu, None)
        
        # Action About
        self.add_action(
            icon_path,
            text=self.tr('‚ÑπÔ∏è √Ä propos'),
            callback=self.show_about,
            parent=self.iface.mainWindow(),
            add_to_toolbar=False
        )

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI"""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.menu,
                action)
            self.iface.removeToolBarIcon(action)
        
        # Fermer l'interface unifi√©e
        if self.unified_window:
            self.unified_window.close()
        if self.dock_widget:
            self.dock_widget.close()

    def show_unified_interface(self):
        """Affiche l'interface unifi√©e principale"""
        try:
            if UnifiedGISENGINEInterface is None:
                QMessageBox.critical(
                    self.iface.mainWindow(),
                    "Import Error",
                    "‚ùå Module interface unifi√©e non trouv√©.\n\n"
                    "V√©rifiez que le fichier ui/unified_interface.py existe."
                )
                return
            
            # Option 1: Fen√™tre ind√©pendante (recommand√©)
            if self.unified_window is None or not self.unified_window.isVisible():
                self.unified_window = UnifiedGISENGINEInterface(self.iface)
                self.unified_window.show()
                
        except Exception as e:
            QMessageBox.critical(
                self.iface.mainWindow(),
                "Erreur",
                f"‚ùå Erreur lors de l'ouverture de l'interface unifi√©e:\n\n{str(e)}"
            )

    def show_workflow_tab(self):
        """Acc√®s direct √† l'onglet workflow"""
        self.show_unified_interface()
        if self.unified_window and hasattr(self.unified_window, 'tabs'):
            self.unified_window.tabs.setCurrentIndex(1)  # Onglet workflow

    def show_transformers_tab(self):
        """Acc√®s direct √† l'onglet transformers"""
        self.show_unified_interface()
        if self.unified_window and hasattr(self.unified_window, 'tabs'):
            self.unified_window.tabs.setCurrentIndex(0)  # Onglet transformers

    def show_processing_tab(self):
        """Acc√®s direct √† l'onglet processing"""
        self.show_unified_interface()
        if self.unified_window and hasattr(self.unified_window, 'tabs'):
            self.unified_window.tabs.setCurrentIndex(2)  # Onglet processing

    def show_about(self):
        """Affiche la bo√Æte de dialogue √Ä propos"""
        about_text = """
        <h2>üõ†Ô∏è GISENGINE pour QGIS</h2>
        <p><b>Version:</b> 1.0.0 - Interface Unifi√©e</p>
        <p><b>Description:</b> Plugin offrant une interface moderne et unifi√©e pour 
        cha√Æner des traitements g√©omatiques dans QGIS avec une interface moderne.</p>
        
        <h3>üéØ Interface Unifi√©e:</h3>
        <ul>
        <li>üõ†Ô∏è <b>Biblioth√®que Transformers</b> - Catalogue de transformations disponibles</li>
        <li>üìä <b>Workflow Designer</b> - Cr√©ation graphique de workflows avec connexions</li>
        <li>‚öôÔ∏è <b>Scanner Processing</b> - Int√©gration compl√®te avec QGIS Processing Framework</li>
        </ul>
        
        <h3>üöÄ Avantages:</h3>
        <ul>
        <li>‚úÖ <b>Une seule fen√™tre</b> pour tous les composants</li>
        <li>‚úÖ <b>Navigation par onglets</b> fluide et intuitive</li>
        <li>‚úÖ <b>Interface moderne</b> avec style professionnel</li>
        <li>‚úÖ <b>Int√©gration QGIS</b> native et optimis√©e</li>
        </ul>
        
        <h3>üìñ Utilisation:</h3>
        <p>Cliquez sur <b>"üöÄ Ouvrir GISENGINE"</b> dans le menu Extensions 
        pour acc√©der √† l'interface compl√®te.</p>
        
        <p><i>üîß Plugin en d√©veloppement actif - Version prototype avanc√©e</i></p>
        """
        
        QMessageBox.about(self.iface.mainWindow(), "√Ä propos - GISENGINE", about_text)

    def run(self):
        """Run method that performs all the real work"""
        # M√©thode appel√©e lors du premier lancement
        if self.first_start:
            self.first_start = False
            # Optionnel: ouvrir automatiquement l'interface au premier lancement
            # self.show_unified_interface()